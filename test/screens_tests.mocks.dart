// Mocks generated by Mockito 5.0.17 from annotations
// in it_books/test/screens_tests.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:collection' as _i2;
import 'dart:ui' as _i8;

import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i3;
import 'package:it_books/models/book.dart' as _i4;
import 'package:it_books/services/providers/rest_service_provider.dart' as _i7;
import 'package:it_books/services/rest_services.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHashMap_0<K, V> extends _i1.Fake implements _i2.HashMap<K, V> {}

class _FakeDefaultCacheManager_1 extends _i1.Fake
    implements _i3.DefaultCacheManager {}

class _FakeBook_2 extends _i1.Fake implements _i4.Book {}

class _FakeRestService_3 extends _i1.Fake implements _i5.RestService {}

/// A class which mocks [RestService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestService extends _i1.Mock implements _i5.RestService {
  MockRestService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: '') as String);
  @override
  _i2.HashMap<dynamic, dynamic> get booksMap =>
      (super.noSuchMethod(Invocation.getter(#booksMap),
              returnValue: _FakeHashMap_0<dynamic, dynamic>())
          as _i2.HashMap<dynamic, dynamic>);
  @override
  set booksMap(_i2.HashMap<dynamic, dynamic>? _booksMap) =>
      super.noSuchMethod(Invocation.setter(#booksMap, _booksMap),
          returnValueForMissingStub: null);
  @override
  _i3.DefaultCacheManager get defaultCacheManager => (super.noSuchMethod(
      Invocation.getter(#defaultCacheManager),
      returnValue: _FakeDefaultCacheManager_1()) as _i3.DefaultCacheManager);
  @override
  set defaultCacheManager(_i3.DefaultCacheManager? _defaultCacheManager) =>
      super.noSuchMethod(
          Invocation.setter(#defaultCacheManager, _defaultCacheManager),
          returnValueForMissingStub: null);
  @override
  _i6.Future<List<dynamic>> getBooks(String? term) =>
      (super.noSuchMethod(Invocation.method(#getBooks, [term]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i6.Future<List<dynamic>>);
  @override
  _i6.Future<List<dynamic>> getBooksByPage(int? page, String? term) =>
      (super.noSuchMethod(Invocation.method(#getBooksByPage, [page, term]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i6.Future<List<dynamic>>);
  @override
  _i6.Future<String> getNumberOfBooks(String? term) =>
      (super.noSuchMethod(Invocation.method(#getNumberOfBooks, [term]),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<_i4.Book> getBookInfo(String? isbn13) =>
      (super.noSuchMethod(Invocation.method(#getBookInfo, [isbn13]),
              returnValue: Future<_i4.Book>.value(_FakeBook_2()))
          as _i6.Future<_i4.Book>);
}

/// A class which mocks [RestServiceProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestServiceProvider extends _i1.Mock
    implements _i7.RestServiceProvider {
  MockRestServiceProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.RestService getRestService() =>
      (super.noSuchMethod(Invocation.method(#getRestService, []),
          returnValue: _FakeRestService_3()) as _i5.RestService);
  @override
  _i5.RestService newRestService() =>
      (super.noSuchMethod(Invocation.method(#newRestService, []),
          returnValue: _FakeRestService_3()) as _i5.RestService);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
